@model GHWebApp.temployees

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>temployees</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.IDEmployees)

    <div class="form-group">
        @Html.LabelFor(model => model.RealID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.RealID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.RealID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IDJobs, "IDJobs", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("IDJobs", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.IDJobs, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IDDept, "IDDept", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("IDDept", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.IDDept, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IDSkills, "IDSkills", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("IDSkills", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.IDSkills, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IDTraining, "IDTraining", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("IDTraining", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.IDTraining, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IDExp, "IDExp", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("IDExp", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.IDExp, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IDLangs, "IDLangs", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("IDLangs", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.IDLangs, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Recommended, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Recommended, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Recommended, "", new { @class = "text-danger" })
        </div>
    </div>




    <div class="form-group">

        @*@Html.TextBoxFor(m => m.userCode, new { @readonly = "readonly" })*@

        @Html.LabelFor(model => model.IDType, "IDType", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @if (ViewBag.vRolName == "Applicant")
            {
                @Html.DropDownList("IDType", null, htmlAttributes: new { @class = "form-control", disabled = "disabled", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.IDType, "", new { @class = "text-danger" })


                @Html.HiddenFor(model => model.IDType) @* Will be posted back *@

            }
            else
            {
                @Html.DropDownList("IDType", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IDType, "", new { @class = "text-danger" })

            }

        </div>


    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">

                @if (ViewBag.vRolName == "Applicant")
                {
                    @*@Html.EditorFor(model => model.Status)*@
                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @readonly = "readonly", disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })

                }
                else
                {

                    @Html.EditorFor(model => model.Status)
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })

                }


            </div>
        </div>
    </div>


    <div class="form-group" hidden>
        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.UserName)
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    @if (ViewBag.vRolName == "Manager")
    {

        <div class="form-group">
            @Html.LabelFor(model => model.DescriptionApproved, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DescriptionApproved, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DescriptionApproved, "", new { @class = "text-danger" })

            </div>
        </div>

    }
    else
    {


        @Html.HiddenFor(model => model.DescriptionApproved) @* Will be posted back *@

    }


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")



<script type="text/javascript">
    $(document).ready(function () {
        //var selectedCountry = $("#Country").val();
        //var selectedRegion = $("#Region").val();
        //var regionsSelect = $('#Region');
      
      //  debugger;

        document.getElementById("IDType").readOnly = true;
       // document.getElementById("IDType").style.color = "#c0c0c0";




    });


        
</script>

        
}
